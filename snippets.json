{
	"Set (rc)": {
		"prefix": "rc",
		"body": [
			"set (rc) = $0"
		],
		"description": "Set (rc)"
	},
	"Close Extract File": {
		"prefix": "cef",
		"body": [
			"CloseExtractFile(\"${1:extract}\")$0"
		],
		"description": "(ExtractId)"
	},
	"Open Extract File": {
		"prefix": "oef",
		"body": [
			"OpenExtractFile(\"${1:${TM_FILENAME_BASE}}\", \"${2:File}\", \"${3|\\,,\\||}\", \"${4:BookEnd}\")",
			"$0"
		],
		"description": "Opens a new Extract File, File, labelled as ExtractID, with each cell to be delimited by Delimiter (In a real CSV file, this must be ,). The BookEnd argument (for lack of a better name) will surround each cell's contents with a given string (usually a single character, which in the case of a real CSV file must be \")."
	},
	"Save Cell": {
		"prefix": "sc",
		"body": [
			"SaveCell(\"${1:extract}}\", \"${2:ColumnID}\", ${3:Content})",
			"$0"
		],
		"description": "Saves Content to the specified Extract File under the column ColumnID. Content can be a String, Local Variable, or Database Field."
	},
	"Column Heading": {
		"prefix": "ch",
		"body": [
			"ColumnHeading(\"${1:extract}\", \"${2:ColumnID}\", \"${3:HeaderText}\", \"${4:Category}\", \"${5:EditMask}\")",
			"$0"
		],
		"description": "Sets out how the outputted Extract File will be formatted. Each column has header text which will appear on the line preceding the file's main table of data (but after the Header from SaveHeader?). The ColumnID is a string that identifies this column within the V program (only has to be unique among columns in the current extract file & V program). Category & EditMask are used for the product Report Writer, probably never used again. Category prints a row between the table's header line and the table itself with the category for each column. EditMask is literally an edit mask (e.g. \"x(20)\") and will cause each cell in this column to behave as such."
	},
	"Next Row": {
		"prefix": "nr",
		"body": [
			"NextRow(\"${1:extract}\")",
			"$0"
		],
		"description": "Used in combination with SaveCell and SaveRecord(), this ensures that the next SaveCell will affect the next line in the Extract File."
	},
	"set DEBUG": {
		"prefix": "set DEBUG",
		"body": [
			"set DEBUG = $0"
		],
		"description": "creates the line to set what to write to the debug file."
	},
	"Prepass Template": {
		"prefix": "prepass",
		"body": [
			"prepass $1",
			"\tsort ${8|str,strd,num,numd|} $9; break edit \"\" ${6:thendo ${2}} ${7:firstdo ${4}}",
			"\tpush $10\n",
			"${3:\tprocess ${2}\n\t\t\n\tendproc ${2}}",
			"\tprocess detail",
			"\t\t",
			"\tendproc detail",
			"${5:\tprocess ${4}\n\t\t\n\tendproc ${4}}",
			"endpass $1"
		],
		"description": "Creates a complete prepass template with three process, a push statement and a sort statement"
	},
	"Debug output file": {
		"prefix": "list debug output",
		"body": [
			"list DEBUG = \"${1:${TM_FILENAME_BASE}}.dbg\" output$0"

		],
		"description": "Creates the debug output line."
	},
	"Set RC Close Extract File": {
		"prefix": "rccef",
		"body": [
			"set (rc) = CloseExtractFile(\"${1:extract}\")$0"
		],
		"description": "Closes and writes to the file labelled as ExtractID."
	},
	"Set RC Open Extract File": {
		"prefix": "rcoef",
		"body": [
			"set (rc) = OpenExtractFile(\"${1:${TM_FILENAME_BASE}}\", \"${2:File}\", \"${3|\\,,\\||}\", \"${4:BookEnd}\")$0"
		],
		"description": "Opens a new Extract File, File, labelled as ExtractID, with each cell to be delimited by Delimiter (In a real CSV file, this must be ,). The BookEnd argument (for lack of a better name) will surround each cell's contents with a given string (usually a single character, which in the case of a real CSV file must be \")."
	},
	"Set RC Save Cell": {
		"prefix": "rcsc",
		"body": [
			"set (rc) = SaveCell(\"${1:extract}\", \"${2:ColumnID}\", ${3:Content})$0"
		],
		"description": "Saves Content to the specified Extract File under the column ColumnID. Content can be a String, Local Variable, or Database Field."
	},
	"Set RC Column Heading": {
		"prefix": "rcch",
		"body": [
			"set (rc) = ColumnHeading(\"${1:extract}\", \"${2:ColumnID}\", \"${3:HeaderText}\", \"${4:Category}\", \"${5:EditMask}\")$0"
		],
		"description": "Sets out how the outputted Extract File will be formatted. Each column has header text which will appear on the line preceding the file's main table of data (but after the Header from SaveHeader?). The ColumnID is a string that identifies this column within the V program (only has to be unique among columns in the current extract file & V program). Category & EditMask are used for the product Report Writer, probably never used again. Category prints a row between the table's header line and the table itself with the category for each column. EditMask is literally an edit mask (e.g. \"x(20)\") and will cause each cell in this column to behave as such."
	},
	"Set RC Next Row": {
		"prefix": "rcnr",
		"body": [
			"set (rc) = NextRow(\"${1:extract}\")$0"
		],
		"description": "Used in combination with SaveCell and SaveRecord(), this ensures that the next SaveCell will affect the next line in the Extract File."
	},
	"process": {
		"prefix": "process",
		"body": [
			"process $1",
			"\t$0",
			"endproc $1"
		],
		"description": "process statement"
	},
	"dowhile": {
		"prefix": "dowhile",
		"body": [
			"${1:set i = 1}",
			"dowhile ${2:i ${3:le subfields(${4:field})}}",
			"\t$0",
			"\t${5:set i = i + 1}",
			"enddo"
		]
	},
	"edit": {
		"prefix": "edit(",
		"body": [
			"edit(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, \"${2:EditMask}\")"
		],
		"description": "As well as being an adverb, edit is also a function that allows one to specify how a particular datatype will be displayed. This is usually used for numbers in long print statements as without an edit mask only text and dates will be displayed. string2 can consist of a long string of x's or z's, x's are used to tell V how to output text, and z's are for numbers. The typical form for string2 when \"editing-masking\" text is \"x(20)\" where 20 can be any number up to the pagewidth. For numbers, the typical form is \"zzz,zzz,zz9.99\" the commas and full stops are where they will appear in the number and the 9's denote where a number should always be shown even if it's a 0. however, this can cause the final output to look bad as blank space is introduced by the edit mask. Using strip() will help with this."
	},
	"strip edit": {
		"prefix": "strip(edit(",
		"body": [
			"strip(edit($1, \"$2\"))"
		],
		"description": "Strip and edit the function, useful in SaveCell lines."
	},
	"FormatDate": {
		"prefix": "FormatDate(",
		"body": [
			"FormatDate(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, \"${2:DateFormatString}\")$0"
		],
		"description": "(Varaible, DateFormatString)"
	},
	"dayson": {
		"prefix": "dayson(",
		"body": [
			"dayson(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:Number}, \"${3:String}\")$0"
		],
		"description": "Used to increase or reduce a date by a given number of days. First argument is the starting date, second is a positive or negative number, third is \"C\" or \"B\" for calendar days or business days."
	},
	"concat": {
		"prefix": "concat(",
		"body": [
			"concat(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:String2})$0"
		],
		"description": "(String1, String2)"
	},
	"yearson": {
		"prefix": "yearson(",
		"body": [
			"yearson(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:Number})$0"
		],
		"description": "Used to increase or reduce a date by a given number of years. First argument is the starting date, second is a positive or negative number."
	},
	"monthson": {
		"prefix": "monthson(",
		"body": [
			"monthson(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:Number})$0"
		],
		"description": "Used to increase or reduce a date by a given number of months. First argument is the starting date, second is a positive or negative number. A 1 month increase from Jan 31 will be Feb 28."
	},
	"modulo": {
		"prefix": "modulo(",
		"body": [
			"modulo(${1:number1}, ${2:number2})$0"
		],
		"description": "Returns the remainder of number1 divided by number 2. (Double floating point Precision) (Returned result has the sign of the dividend/numerator)"
	},
	"leftstr": {
		"prefix": "leftstr(",
		"body": [
			"leftstr(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:number})$0"
		],
		"description": "returns the first X characters of a string."
	},
	"midstr": {
		"prefix": "midstr(",
		"body": [
			"midstr(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:number}, ${3:number})$0"
		],
		"description": "returns x characters from specified starting point in given string. First number is starting point, second number is number of characters. Works as a leftstr from starting point"
	},
	"rightstr": {
		"prefix": "rightstr(",
		"body": [
			"rightstr(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:number})$0"
		],
		"description": "returns the last X characters of a string."
	},
	"substr": {
		"prefix": "substr(",
		"body": [
			"substr(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, ${2:string}, ${3:string})$0"
		],
		"description": "Substitute every occurance of string1 with string2 in the given variable. Can be used as a basic split function, replacing spaces with a bar."
	},
	"FieldLookUp": {
		"prefix": "FieldLookUp(",
		"body": [
			"FieldLookUp(${1:string}, \"$2\")$0"
		],
		"description": "Searches all but the first column of a bar-delimited file (string1) for the contents of the second argument and returns the value in the first column of the file."
	},
	"round": {
		"prefix": "round(",
		"body": [
			"round(${1:Number}, ${2:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Rounds Number2 to the nearest Number1 decimal places."
	},
	"KeySearch": {
		"prefix": "KeySearch(",
		"body": [
			"KeySearch(\"${1:String}\", \"${2:String}\", \"${3:String}\", ${4:Date})$0"
		],
		"description": "Given a bucket, a search string, a bar list of fields to search in, and a date left blank. Will search for the first record where the search string matches one of the fields in the bar of fields. Will only return the first match."
	},
	"fieldsearch": {
		"prefix": "fieldsearch(",
		"body": [
			"fieldsearch(${1:string}, ${2:string})$0"
		],
		"description": "First item is a bar file that will be searched, second is a variable that is being searched for. It will search in column two of the file, column 3,4,5,etc. if they exist. The function will return the first column, and will only return the first match."
	},
	"Control bucket": {
		"prefix": "cb(",
		"body": [
			"control bucket \"${1|tran,trantrace,codes,prices,sectype,tac|}\"$0"
		],
		"description": "Control bucket statement"
	},
	"Control bucket keys": {
		"prefix": "cbk(",
		"body": [
			"control bucket \"${1|tran,trantrace,sectype,prices,codes,tac|}\"",
			"",
			"keys \"$3\" ($4)$0"
		],
		"description": "Control bucket statement"
	},
	"stroffset": {
		"prefix": "stroffset(",
		"body": [
			"stroffset(\"$1\", \"$2\")$0"
		],
		"description": "Finds the starting location of string2 within string1 and returns it. Returns \"0.000000\" if there is no match."
	},
	"Big template program with debug": {
		"prefix": "templatebig(",
		"body":[
				"control bucket \"${1|tran,trantrace,sectype,prices,codes,tac|}\"\n",
				"keys \"\" ()\n",
				"list DEBUG = \"${TM_FILENAME_BASE}.dbg\" output\n\n",
				"${2:process beginning\n\tset DEBUG = \"Start beginning\"\n\t\n\tset DEBUG = \"End beginning\"\nendproc\n}",
				"${3:process prerun\n\tset DEBUG = \"Start prerun\"\n\n\tset DEBUG = \"End prerun\"\nendproc\n}",
				"sort \n",
				"${4:process detail\n\tset DEBUG = \"Start detail\"\n\n\tset DEBUG = \"End detail\"\nendproc\n}" ,
				"print\n",
				"${5:process heading\n\tset DEBUG = \"Start heading\"\n\n\tset DEBUG = \"End heading\"\nendproc\n}",
				"${6:process ending\n\tset DEBUG = \"Start ending\"\n\n\tset DEBUG = \"End ending\"\nendproc}"
		],
		"description": "Big template with debugs in every process"
	},
	"ReOpen": {
		"prefix": "reopen(",
		"body": [
			"reopen(${1:list}, ${2:filename})$0"
		],
		"description": "Takes a filename and the list variable and reopens the file, used when a file is being deleted and recreated."
	},
	"list DUMMY": {
		"prefix": "list DUMMY",
		"body": [
			"list DUMMY$1 = \"$2\" output",
			"list $1 = \"$2\" input$0"
		]
	},
	"Template program": {
		"prefix": "template",
		"body":[
				"control bucket \"${1|tran,trantrace,sectype,prices,codes,tac|}\"\n",
				"keys \"$2\" ($3)\n",
				"sort ${4|str,strd,num,numd|}\n",
				"print $0"
		],
		"description": "Big template with debugs in every process"
	},
	"set": {
		"prefix": "set",
		"body":[
				"set ($1) = $0"
		],
		"description": "Small set statement"
	},
	"runonce": {
		"prefix": "runonce",
		"body":[
			"control bucket \"sectype\"\n",
			"keys \"cash\" (security type code)\n",
			"sort str \"1\"\n\n",
			"process detail",
			"\t$0",   
			"endproc",
			"",
			"print \"\""
		],
		"description": "template for running program once"
	},
	"To excel": {
		"prefix": "to excel",
		"body":[
			"concat(\"\\\"=\\\"\\\"\", ${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})",
			"set ${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}} = concat(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}}, \"\\\"\\\"\\\"\")$0"
		],
		"description": "Will stop excel from changing the data"
	},
	"environment": {
		"prefix": "environment(",
		"body":[
			"environment(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Returns the value of an environment variable"
	},
	"length": {
		"prefix": "length(",
		"body":[
			"length(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "returns the number of characters in the string"
	},
	"floor": {
		"prefix": "floor(",
		"body":[
			"floor(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Always rounds number down. (Double floating point Precision)"
	},
	"ceiling": {
		"prefix": "ceiling(",
		"body":[
			"ceiling(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Always rounds number down. (Double floating point Precision)"
	},
	"weekday": {
		"prefix": "weekday(",
		"body":[
			"weekday(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Returns a number according to what day of the week date is. (I.E. if date is Monday, weekday() will return 1.) The range is 1-7 (Mon-Sun)."
	},
	"stripzero": {
		"prefix": "stripzero(",
		"body":[
			"stripzero(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Same as strip() but removes trailing (and leading?) zeros too."
	},
	"StringToDate": {
		"prefix": "StringToDate(",
		"body":[
			"StringToDate(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Converts a String into the internal biton date format (the number of days since 31 Dec 1979, the 0 day)"
	},
	"strip": {
		"prefix": "strip(",
		"body":[
			"strip(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "I believe strip is available for use with any data type in V (all 3 of them(!)). It's purpose is to remove any extraneous whitespace from the beginning and end of your data. Useful for removing the whitespace introduced by an edit mask"
	},
	"ucase": {
		"prefix": "ucase(",
		"body":[
			"ucase(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Converts all characters in a string to uppercase."
	},
	"lcase": {
		"prefix": "lcase(",
		"body":[
			"lcase(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Converts all characters in a string to lowercase."
	},
	"monthof": {
		"prefix": "monthof(",
		"body":[
			"monthof(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Gets what month the biton date is"
	},
	"yearof": {
		"prefix": "yearof(",
		"body":[
			"yearof(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Gets what year the biton date is"
	},
	"dayof": {
		"prefix": "dayof(",
		"body": "dayof(${1:today})$0",
		"description": "Gets what day of the month the biton date is"
	},
	"log": {
		"prefix": "log(",
		"body":[
			"log(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Returns the natural log, ln(number) of the number"
	},
	"exp": {
		"prefix": "exp(",
		"body":[
			"exp(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Returns e or 2.71828.... to the power of number"
	},
	"sqrt": {
		"prefix": "sqrt(",
		"body":[
			"sqrt(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Surprisingly, returns the square root of Number"
	},
	"longdate": {
		"prefix": "longdate(",
		"body":[
			"longdate(${1:${TM_CURRENT_LINE/(^.*?\\b )|\\s*?\\=\\s*?.*?$//g}})$0"
		],
		"description": "Returns the date in format DDth Month Year, e.g 23rd July 2021"
	},
	"trace keys": {
		"prefix": "tracekeys",
		"body": [
			"variable ${1:whatport}1=substr(${1:whatport},\"|\",\"*PIPE\")",
			"variable ${1:whatport}2=substr(${1:whatport}1,\"PIPE\",\"|\")",
			"variable ${1:whatport}3=concat(${1:whatport}2,\"*\")",
			"",
			"keys (${1:whatport}3) (witch key)",
			"",
			"",
			"${2:process prerun\n\tset (PortfolioCode)=(leftstr(witch key[1],4))\n\tset (Key)=(witch key[1])\n\tset (Order)=(witch key[2])\nendproc}$0"
		],
		"description": "Gives the manipulation required for a trace keys search."
	},
	"Questions": {
		"prefix": "questions",
		"body": [
			"${1:control spool=<1SReport straight to printer ? default \"no\"}",
			"${2:variable start=<5DTransactions from ? default today}",
			"${3:variable end=<2DTransactions to ? default today}",
			"${4:variable portgroup=<82SParticular Portfolio groups ? default \"Funds\"}",
			"${5:variable portlist=(portgroup->code list)\nvariable whatport=<3SParticular Portfolios ? default portlist}$0"
		]
	},
	"debug concat": {
		"prefix": "set debug = concat(",
		"body": [
			"set debug = concat(debug, \", \")",
			"set debug = concat(debug, $1)$0"
		]
	},
	"create delete": {
		"prefix": "if rc sne",
		"body": [
			"if rc sne \"\"",

			"\tset rc = poolcopy(\"$1\")",
			"",
			"\tset rc = delete(\"$1\")",
			"\tset rc = create(\"$1\")",
		"endif$0"
		]
	},
	"#include buildemptyarray.inc": {
		"prefix": "#include buildemptyarray.inc",
		"body": [
			"set (ba maxsize) = $1",
			"set (ba array) = $2",
			"#include buildemptyarray.inc",
			"set $3 = (ba array)$0"
		],
		"description": "Creates an empty array of size (ba maxsize). The array is output as (ba array)"
	},
	"#include getarrayindex.inc": {
		"prefix": "#include getarrayindex.inc",
		"body": [
			"set (check maxsize) = $1",
			"set (ba array) = $2",
			"#include getarrayindex.inc",
			"set $3 = (ba index)$0"

		],
		"description": "Returns the index of a value in an array. The index is output as (ba index), if the value does not exist in the array the -1 is returned. (ba check) is the value you wish to check, (ba array) is the array you wish to search within."
	},
	"#include setarrayindex.inc": {
		"prefix": "#include setarrayindex.inc",
		"body": [
			"set (ba add) = $1",
			"set (ba array) = $2",
			"set (ba index) = $3",
			"#include setarrayindex.inc",
			"set $4 = (ba array)$0"
		],
		"description": "Returns an array with value: (ba add), at index: (ba index), into an array: (ba array)."
	},
	"#include delarrayindex.inc": {
		"prefix": "#include delarrayindex.inc",
		"body": [
			"set (ba index) = $1",
			"set (ba array) = $2",
			"#include delarrayindex.inc",
			"set $3 = (ba array)$0"
		],
		"description": "Deletes whatever value is at index: (ba index) in array: (ba array)"
	},
	"#include arrayconcat.inc": {
		"prefix": "#include arrayconcat.inc",
		"body": [
			"set (carray) = $1",
			"set (citem) = $2",
			"set (cdelim) = $3",
			"#include arrayconcat.inc",
			"set $4 = (carray)$0"
		],
		"description": "We concatenate array: (carray), with value: (citem). The array's delimiter value (cdelim) must be defined."
	},
	"#include arraydiff.inc": {
		"prefix": "#include arraydiff.inc",
		"body": [
			"set (ad PreChange) = $1",
			"set (ad PostChange) = $2",
			"#include arraydiff.inc",
			"set $3 = (ad Added)",
			"set $4 = (ad Removed)",
			"set $5 = (ad AllChanges)",
			"set $6 = (ad TotalChanges)$0"
		],
		"description": "This include file returns the difference between two arrays in V. (ad PreChange) The first array. (ad PostChange) The array you wish to check against. (ad Added) All the elements which have been added. (ad Removed) all the elements which have been removed. (ad AllChanges) An array of all elements from both arrays. (ad Balance) How many more/fewer elements are there now (PostChanges) than there were before (PreChanges).(ad TotalChanges) The total length of the two arrays"
	},
	"#include trandate.inc": {
		"prefix": "#include trandate.inc",
		"body": [
			"#include trandate.inc",
			"set $1 = (transaction trade date)$0"
		],
		"description": "Asks the user for the (transaction trade date). The include will then check all the necessary conditions to ensure the date the user is inputting is acceptable"
	},
	"#include mmddyyyy2biton.inc": {
		"prefix": "#include mmddyyyy2biton.inc",
		"body": [
			"set (indate) = $1",
			"#include mmddyyyy2biton.inc",
			"set $2 = (bitondate)$0"
		],
		"description": "This include file will convert a mm/dd/yyyy date into a BITON date. e.g 07/19/72 or 07/19/1972 to 19 Jul 1972"
	},
	"#include yyyymmdd2biton.inc": {
		"prefix": "#include yyyymmdd2biton.inc",
		"body": [
			"set (indate) = $1",
			"#include yyyymmdd2biton.inc",
			"set $2 = (bitondate)$0"
		],
		"description": "This include file will convert a YYYYMMDD date into a BITON date. e.g 19720719 to 19 Jul 1972"
	},
	"#include ddmmyyyy2biton.inc": {
		"prefix": "#include ddmmyyyy2biton.inc",
		"body": [
			"set (indate) = $1",
			"#include ddmmyyyy2biton.inc",
			"set $2 = (bitondate)$0"
		],
		"description": "This include file will convert a dd/mm/yyyy date into a BITON date. e.g 19/07/72 or 19/07/1972 to 19 Jul 1972"
	},
	"#include yyyymmdd.inc": {
		"prefix": "#include yyyymmdd.inc",
		"body": [
			"set (indate) = $1",
			"#include yyyymmdd.inc",
			"set $2 = (outdate)$0"
		],
		"description": "Converts biton date to YYYYMMDD format."
	},
	"#include autopridate.inc": {
		"prefix": "#include autopridate.inc",
		"body": [
			"set (indate) = $1",
			"#include autopridate.inc",
			"set $2 = (outdate)$0"
		],
		"description": "This include file will convert a dd/mm/yyyy date into a BITON date."
	},
	"#include nanotime.inc": {
		"prefix": "#include nanotime.inc",
		"body": [
			"#include nanotime.inc",
			"set $1 = (nanotime)$0"
		],
		"description": "Returns a string of the current time in the format \"HH:MM:SS.NNNNNNNNN\" where the N's represent nanoseconds."
	},
	"#include basedir.inc": {
		"prefix": "#include basedir.inc",
		"body": [
			"#include basedir.inc",
			"set $1 = (basedir)$0"
		],
		"description": "Stores the base-directory in the variable (basedir)"
	}
}


